// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przepisy.Data.Data;

#nullable disable

namespace Przepisy.Data.Migrations
{
    [DbContext(typeof(PrzepisyContext))]
    [Migration("20250327204044_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Przepisy.Data.Data.CMS.Aktualnosc", b =>
                {
                    b.Property<int>("IdAktualnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAktualnosci"));

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAktualnosci");

                    b.ToTable("Aktualnosc");
                });

            modelBuilder.Entity("Przepisy.Data.Data.CMS.Strona", b =>
                {
                    b.Property<int>("IdStrony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStrony"));

                    b.Property<string>("LinkTytul")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Pozycja")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStrony");

                    b.ToTable("Strona");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.GrupaPrzepisu", b =>
                {
                    b.Property<int>("IdGrupyPrzepisu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGrupyPrzepisu"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdGrupyPrzepisu");

                    b.ToTable("GrupaPrzepisu");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Kuchnia", b =>
                {
                    b.Property<int>("IdKuchni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKuchni"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdKuchni");

                    b.ToTable("Kuchnia");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Przepis", b =>
                {
                    b.Property<int>("IdPrzepisu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrzepisu"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<int>("GrupaPrzepisuId")
                        .HasColumnType("int");

                    b.Property<string>("KrotkiOpis")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("KuchniaId")
                        .HasColumnType("int");

                    b.Property<string>("OpisWykonania")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<double>("SredniaOcena")
                        .HasColumnType("float");

                    b.Property<int>("Trudnosc")
                        .HasColumnType("int");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlZdjecia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPrzepisu");

                    b.HasIndex("AutorId");

                    b.HasIndex("GrupaPrzepisuId");

                    b.HasIndex("KuchniaId");

                    b.ToTable("Przepis");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.PrzepisSkladnik", b =>
                {
                    b.Property<int>("IdPrzepisSkladnik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrzepisSkladnik"));

                    b.Property<double>("IloscGram")
                        .HasColumnType("float");

                    b.Property<int>("PrzepisId")
                        .HasColumnType("int");

                    b.Property<int>("SkladnikId")
                        .HasColumnType("int");

                    b.HasKey("IdPrzepisSkladnik");

                    b.HasIndex("PrzepisId");

                    b.HasIndex("SkladnikId");

                    b.ToTable("PrzepisSkladnik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Skladnik", b =>
                {
                    b.Property<int>("IdSkladnika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSkladnika"));

                    b.Property<bool>("CzyAktywny")
                        .HasColumnType("bit");

                    b.Property<double>("KalorycznoscNa100g")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double?>("PrzelicznikNaSztuke")
                        .HasColumnType("float");

                    b.Property<string>("UrlZdjecia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSkladnika");

                    b.ToTable("Skladnik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Ocena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PrzepisId")
                        .HasColumnType("int");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.Property<int>("Wartosc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrzepisId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Ocena");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Recenzja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrzepisId")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrzepisId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Recenzja");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Rola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaAbonamentu")
                        .HasColumnType("money");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Rola");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.UlubionyPrzepis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PrzepisId")
                        .HasColumnType("int");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrzepisId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("UlubionyPrzepis");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaUzytkownika")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RolaId")
                        .HasColumnType("int");

                    b.Property<string>("UrlAwataru")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolaId");

                    b.ToTable("Uzytkownik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Przepis", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", "Autor")
                        .WithMany("DodanePrzepisy")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Przepisy.GrupaPrzepisu", "GrupaPrzepisu")
                        .WithMany("Przepis")
                        .HasForeignKey("GrupaPrzepisuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Przepisy.Kuchnia", "Kuchnia")
                        .WithMany("Przepis")
                        .HasForeignKey("KuchniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("GrupaPrzepisu");

                    b.Navigation("Kuchnia");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.PrzepisSkladnik", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Przepisy.Przepis", "Przepis")
                        .WithMany("Skladniki")
                        .HasForeignKey("PrzepisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Przepisy.Skladnik", "Skladnik")
                        .WithMany("Przepisy")
                        .HasForeignKey("SkladnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Przepis");

                    b.Navigation("Skladnik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Ocena", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Przepisy.Przepis", "Przepis")
                        .WithMany("Oceny")
                        .HasForeignKey("PrzepisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", "Uzytkownik")
                        .WithMany("Oceny")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Przepis");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Recenzja", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Przepisy.Przepis", "Przepis")
                        .WithMany("Recenzje")
                        .HasForeignKey("PrzepisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", "Uzytkownik")
                        .WithMany("Recenzje")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Przepis");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.UlubionyPrzepis", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Przepisy.Przepis", "Przepis")
                        .WithMany("Ulubione")
                        .HasForeignKey("PrzepisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", "Uzytkownik")
                        .WithMany("UlubionePrzepisy")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Przepis");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", b =>
                {
                    b.HasOne("Przepisy.Data.Data.Uzytkownicy.Rola", "Rola")
                        .WithMany("Uzytkownicy")
                        .HasForeignKey("RolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rola");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.GrupaPrzepisu", b =>
                {
                    b.Navigation("Przepis");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Kuchnia", b =>
                {
                    b.Navigation("Przepis");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Przepis", b =>
                {
                    b.Navigation("Oceny");

                    b.Navigation("Recenzje");

                    b.Navigation("Skladniki");

                    b.Navigation("Ulubione");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Przepisy.Skladnik", b =>
                {
                    b.Navigation("Przepisy");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Rola", b =>
                {
                    b.Navigation("Uzytkownicy");
                });

            modelBuilder.Entity("Przepisy.Data.Data.Uzytkownicy.Uzytkownik", b =>
                {
                    b.Navigation("DodanePrzepisy");

                    b.Navigation("Oceny");

                    b.Navigation("Recenzje");

                    b.Navigation("UlubionePrzepisy");
                });
#pragma warning restore 612, 618
        }
    }
}
